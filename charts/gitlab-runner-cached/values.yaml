# The namespace in which the resources will be installed.
# You can't use the `--namespace` flag on `helm install` because the helm controller requires the "HelmChart" CRD(s) to be installed in the
# "kube-system" namespace and using the `--namespace` flag would prevent a multi namespace installation and the installation would fail.
namespace:
  # The "name" field is optional. If empty or not provided the helm release name will be used instead.
  # Instead of providing the full namespace you can also use "namePrefix" or "nameSuffix" to use the helm release name and prefix and/or suffix.
  name: ""
  # The "resourcePolicy" field is optional. If it's set to "keep" the namespace WILL NOT be deleted when the chart is being uninstalled.
  # If resourcePolicy is set to an empty string ("") the namespace WILL BE DELETED on uninstall! Only do this if your helm chart is the
  # only application in this namespace or when you're 100% sure that you want to delete all other resources in this namespace as well!
  resourcePolicy: keep

# Get the latest version with this command:
# helm repo add gitlab https://charts.gitlab.io && helm repo update && helm search repo gitlab/gitlab-runner
gitlabRunnerHelmchartVersion: 0.38.1

persistence:
  enabled: true
  accessMode: "ReadWriteOnce"
  size: "20Gi"

gitlabRunnerValues:
  fullnameOverride: gitlab-runner-cached

  ## The GitLab Server URL (with protocol) that want to register the runner against
  ## ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-register
  ##
  gitlabUrl: https://gitlab.com/

  ## The Registration Token for adding new Runners to the GitLab Server. This must
  ## be retrieved from your GitLab Instance.
  ## ref: https://docs.gitlab.com/runner/register/#requirements
  ##
  # runnerRegistrationToken: ""

  ## The Runner Token for adding new Runners to the GitLab Server. This must
  ## be retrieved from your GitLab Instance. It is token of already registered runner.
  ## ref: (we don't yet have docs for that, but we want to use existing token)
  ##
  # runnerToken: ""

  ## Unregister all runners before termination
  ##
  ## Updating the runner's chart version or configuration will cause the runner container
  ## to be terminated and created again. This may cause your Gitlab instance to reference
  ## non-existant runners. Un-registering the runner before termination mitigates this issue.
  ## ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-unregister
  ##
  unregisterRunners: true

  ## When stopping the runner, give it time to wait for its jobs to terminate.
  ##
  ## Updating the runner's chart version or configuration will cause the runner container
  ## to be terminated with a graceful stop request. terminationGracePeriodSeconds
  ## instructs Kubernetes to wait long enough for the runner pod to terminate gracefully.
  ## ref: https://docs.gitlab.com/runner/commands/#signals
  terminationGracePeriodSeconds: 1800

  ## Configure the maximum number of concurrent jobs
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
  ##
  concurrent: 50

  ## Defines in seconds how often to check GitLab for a new builds
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
  ##
  checkInterval: 5

  ## For RBAC support:
  rbac:
    create: true
    ## Define list of rules to be added to the rbac role permissions.
    ## Each rule supports the keys:
    ## - apiGroups: default "" (indicates the core API group) if missing or empty.
    ## - resources: default "*" if missing or empty.
    ## - verbs: default "*" if missing or empty.
    rules:
      - apiGroups: ["", "batch", "extensions", "apps"]
        resources: ["*"]
        verbs: ["*"]

    ## Run the gitlab-bastion container with the ability to deploy/manage containers of jobs
    ## cluster-wide or only within namespace
    clusterWideAccess: true

  ## Configuration for the Pods that that the runner launches for each new job
  ##
  runners:
    config: |
      [[runners]]
        [runners.kubernetes]
          image = "ubuntu:20.04"
          privileged = true

    ## Specify one or more imagePullSecrets
    ##
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # imagePullSecrets: []

    ## Specify whether the runner should be locked to a specific project: true, false. Defaults to true.
    ##
    locked: false

    ## Specify the tags associated with the runner. Comma-separated list of tags.
    ##
    ## ref: https://docs.gitlab.com/ce/ci/runners/#use-tags-to-limit-the-number-of-jobs-using-the-runner
    ##
    tags: "privileged, kubernetes, k8s, k3s"

    ## Specify if jobs without tags should be run.
    ## If not specified, Runner will default to true if no tags were specified. In other case it will
    ## default to false.
    ##
    ## ref: https://docs.gitlab.com/ce/ci/runners/#runner-is-allowed-to-run-untagged-jobs
    ##
    runUntagged: true
